orbs:
  slack: circleci/slack@4.1
version: '2.1'
executors:
  app-executor:
    docker:
      - image: circleci/node:latest
    working_directory: ~/repo
  terraform-executor:
    docker:
      - image: hashicorp/terraform:1.3.9

aliases:
  - &restore-cache
    restore_cache:
      keys: 
        - app-{{ checksum "./lambda-save-email/package.json" }}
        - app-
  - &install-dependencies-save-email
    run:
      name: Install dependecies
      command: |
        sed 's/AllowOrigin: \"[^\"]*\"/AllowOrigin: $URL_API_DEVELOP/g' template.yaml


        cat template.yaml
        cd lambdas/lambda-save-email
        mkdir -p artifacts
        npm install
  - &install-dependencies-send-grid
    run:
      name: Install dependecies
      command: |
        cd lambdas/lambda-sendGrid
        mkdir -p artifacts
        npm install
  - &save-cache
    save_cache:
      paths: 
        - ./node_modules/lambda-save-email
      key: app-{{ checksum "./lambda-save-email/package.json" }}
  - &install-aws-cli
    run:
      name: Installing aws cli
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
jobs:
  deploy-to-aws-lambda:
    executor: app-executor
    steps:
      - checkout
      - *save-cache
      - *restore-cache
      - *install-dependencies-save-email
      - *install-dependencies-send-grid
      - *install-aws-cli
      - run:
          name: Deploy to aws lambda
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
              then
                export STAGE="Production"
                export URL=$URL_PRODUCTION
                aws cloudformation package --template-file template.yaml --s3-bucket $AWS_BUCKET_NAME --output-template-file packaged.production.yaml
                aws cloudformation deploy --template-file packaged.production.yaml --stack-name hire-a-friend-production --capabilities CAPABILITY_IAM --s3-bucket $AWS_BUCKET_NAME --parameter-overrides Stage=Production S3BucketPolicy=$AWS_BUCKET_POLICY URL=$URL --region us-east-1 
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
              then
                export STAGE="Staging"
                export URL=$URL_STAGING
                aws cloudformation package --template-file template.yaml --s3-bucket $AWS_BUCKET_NAME --output-template-file packaged.staging.yaml
                aws cloudformation deploy --template-file packaged.staging.yaml --stack-name hire-a-friend-staging --capabilities CAPABILITY_IAM --s3-bucket $AWS_BUCKET_NAME --parameter-overrides Stage=Staging S3BucketPolicy=$AWS_BUCKET_POLICY URL=$URL --region us-east-1 
            else
              export STAGE="Develop"
              export URL=$URL_DEVELOP
              aws cloudformation package --template-file template.yaml --s3-bucket $AWS_BUCKET_NAME --output-template-file packaged.development.yaml
              aws cloudformation deploy --template-file packaged.development.yaml --stack-name hire-a-friend-develop --capabilities CAPABILITY_IAM --s3-bucket $AWS_BUCKET_NAME --parameter-overrides Stage=Develop S3BucketPolicy=$AWS_BUCKET_POLICY URL=$URL --region us-east-1 
            fi
            cd ./lambdas/lambda-sendGrid
            sudo apt-get update && sudo apt-get install -y zip
            zip -r lambda-sendGrid.zip ./*
            aws lambda update-function-code --function-name hire-a-friend-send-grid --zip-file fileb://lambda-sendGrid.zip --region us-east-1
            while true; do
              status=$(aws lambda get-function --function-name hire-a-friend-send-grid --query 'Configuration.LastUpdateStatus' --output text --region us-east-1)
              if [ "$status" == "Successful" ]; then
                  echo "Lambda function update successful!"
                  break
              elif [ "$status" == "Failed" ]; then
                  echo "Lambda function update failed!"
                  exit 1
              else
                  echo "Waiting for Lambda function update to complete."
                  sleep 10
                fi
            done
            aws lambda update-function-configuration --function-name hire-a-friend-send-grid --environment "Variables={SEND_GRID_API_KEY=${SEND_GRID_API_KEY},SEND_GRID_TEMPLATE=${SEND_GRID_TEMPLATE}}" --region us-east-1
            aws s3 rm s3://$AWS_BUCKET_NAME/ --exclude "emails-Develop.json" --exclude "emails-Production.json" --exclude "emails-Staging.json" --recursive
workflows:
  build_and_deploy:
    jobs:
      - deploy-to-aws-lambda